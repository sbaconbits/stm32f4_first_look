// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!!! This file is generated by reg_gen !!!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


// SCB_CPACR_CP11 [23:22]. 
#define SCB_CPACR_CP11_BITS 2
#define SCB_CPACR_CP11_SHIFT 22
#define SCB_CPACR_CP11_MASK 0x3
#define SCB_CPACR_CP11_VAL_FULL_ACCESS 3 

// SCB_CPACR_CP10 [21:20]. 
#define SCB_CPACR_CP10_BITS 2
#define SCB_CPACR_CP10_SHIFT 20
#define SCB_CPACR_CP10_MASK 0x3
#define SCB_CPACR_CP10_VAL_FULL_ACCESS 3 

// SCB_VTOR_TBLOFF [29:9]. Vector table base offset field.
#define SCB_VTOR_TBLOFF_BITS 21
#define SCB_VTOR_TBLOFF_SHIFT 9
#define SCB_VTOR_TBLOFF_MASK 0x1fffff

// RCC_CR_HSEON [16]. 
#define RCC_CR_HSEON_BITS 1
#define RCC_CR_HSEON_SHIFT 16
#define RCC_CR_HSEON_MASK 0x1
#define RCC_CR_HSEON_VAL_ON 1 

// RCC_CR_HSION [0]. 
#define RCC_CR_HSION_BITS 1
#define RCC_CR_HSION_SHIFT 0
#define RCC_CR_HSION_MASK 0x1
#define RCC_CR_HSION_VAL_ON 1 

// RCC_CR_CSSON [19]. 
#define RCC_CR_CSSON_BITS 1
#define RCC_CR_CSSON_SHIFT 19
#define RCC_CR_CSSON_MASK 0x1

// RCC_CR_PLLON [24]. 
#define RCC_CR_PLLON_BITS 1
#define RCC_CR_PLLON_SHIFT 24
#define RCC_CR_PLLON_MASK 0x1
#define RCC_CR_PLLON_VAL_ON 1 

// RCC_CR_HSEBYP [18]. 
#define RCC_CR_HSEBYP_BITS 1
#define RCC_CR_HSEBYP_SHIFT 18
#define RCC_CR_HSEBYP_MASK 0x1

// RCC_PLLCFGR_PLLQ [27:24]. 
#define RCC_PLLCFGR_PLLQ_BITS 4
#define RCC_PLLCFGR_PLLQ_SHIFT 24
#define RCC_PLLCFGR_PLLQ_MASK 0xf

// RCC_PLLCFGR_PLLSRC [22]. 
#define RCC_PLLCFGR_PLLSRC_BITS 1
#define RCC_PLLCFGR_PLLSRC_SHIFT 22
#define RCC_PLLCFGR_PLLSRC_MASK 0x1
#define RCC_PLLCFGR_PLLSRC_VAL_HSI 0 // HSI is main pll clock source
#define RCC_PLLCFGR_PLLSRC_VAL_HSE 1 // HSE is main pll clock source

// RCC_PLLCFGR_PLLP [17:16]. 
#define RCC_PLLCFGR_PLLP_BITS 2
#define RCC_PLLCFGR_PLLP_SHIFT 16
#define RCC_PLLCFGR_PLLP_MASK 0x3
#define RCC_PLLCFGR_PLLP_VAL_2 0 
#define RCC_PLLCFGR_PLLP_VAL_4 1 
#define RCC_PLLCFGR_PLLP_VAL_6 2 
#define RCC_PLLCFGR_PLLP_VAL_8 3 

// RCC_PLLCFGR_PLLN [14:6]. 
#define RCC_PLLCFGR_PLLN_BITS 9
#define RCC_PLLCFGR_PLLN_SHIFT 6
#define RCC_PLLCFGR_PLLN_MASK 0x1ff

// RCC_PLLCFGR_PLLM [5:0]. 
#define RCC_PLLCFGR_PLLM_BITS 6
#define RCC_PLLCFGR_PLLM_SHIFT 0
#define RCC_PLLCFGR_PLLM_MASK 0x3f

// RCC_APB1ENR_PWREN [28]. 
#define RCC_APB1ENR_PWREN_BITS 1
#define RCC_APB1ENR_PWREN_SHIFT 28
#define RCC_APB1ENR_PWREN_MASK 0x1
#define RCC_APB1ENR_PWREN_VAL_ENABLE 1 

// RCC_APB1ENR_DACEN [29]. DAC interface clock enable
#define RCC_APB1ENR_DACEN_BITS 1
#define RCC_APB1ENR_DACEN_SHIFT 29
#define RCC_APB1ENR_DACEN_MASK 0x1
#define RCC_APB1ENR_DACEN_VAL_ENABLE 1 

// RCC_APB1ENR_TIM6 [4]. Timer6 clock enable
#define RCC_APB1ENR_TIM6_BITS 1
#define RCC_APB1ENR_TIM6_SHIFT 4
#define RCC_APB1ENR_TIM6_MASK 0x1
#define RCC_APB1ENR_TIM6_VAL_ENABLE 1 

// RCC_APB1ENR_USART2EN [17]. 
#define RCC_APB1ENR_USART2EN_BITS 1
#define RCC_APB1ENR_USART2EN_SHIFT 17
#define RCC_APB1ENR_USART2EN_MASK 0x1
#define RCC_APB1ENR_USART2EN_VAL_ENABLE 1 

// RCC_AHB1ENR_GPIOAEN [0]. 
#define RCC_AHB1ENR_GPIOAEN_BITS 1
#define RCC_AHB1ENR_GPIOAEN_SHIFT 0
#define RCC_AHB1ENR_GPIOAEN_MASK 0x1
#define RCC_AHB1ENR_GPIOAEN_VAL_ENABLE 1 

// RCC_AHB1ENR_GPIODEN [3]. 
#define RCC_AHB1ENR_GPIODEN_BITS 1
#define RCC_AHB1ENR_GPIODEN_SHIFT 3
#define RCC_AHB1ENR_GPIODEN_MASK 0x1
#define RCC_AHB1ENR_GPIODEN_VAL_ENABLE 1 

// RCC_AHB1ENR_DMA1EN [21]. 
#define RCC_AHB1ENR_DMA1EN_BITS 1
#define RCC_AHB1ENR_DMA1EN_SHIFT 21
#define RCC_AHB1ENR_DMA1EN_MASK 0x1
#define RCC_AHB1ENR_DMA1EN_VAL_ENABLE 1 

// RCC_CFGR_SW [1:0]. PLL Selected as system clock
#define RCC_CFGR_SW_BITS 2
#define RCC_CFGR_SW_SHIFT 0
#define RCC_CFGR_SW_MASK 0x3
#define RCC_CFGR_SW_VAL_PLL 2 

// RCC_CFGR_HPRE [7:4]. 
#define RCC_CFGR_HPRE_BITS 4
#define RCC_CFGR_HPRE_SHIFT 4
#define RCC_CFGR_HPRE_MASK 0xf
#define RCC_CFGR_HPRE_VAL_NO_DIVIDE 0 

// RCC_CFGR_PPRE2 [15:13]. 
#define RCC_CFGR_PPRE2_BITS 3
#define RCC_CFGR_PPRE2_SHIFT 13
#define RCC_CFGR_PPRE2_MASK 0x7
#define RCC_CFGR_PPRE2_VAL_DIV2 4 

// RCC_CFGR_PPRE1 [12:10]. 
#define RCC_CFGR_PPRE1_BITS 3
#define RCC_CFGR_PPRE1_SHIFT 10
#define RCC_CFGR_PPRE1_MASK 0x7
#define RCC_CFGR_PPRE1_VAL_DIV4 5 

// GPIO_AFR [3:0]. 
#define GPIO_AFR_BITS 4
#define GPIO_AFR_SHIFT 0
#define GPIO_AFR_MASK 0xf

// GPIO_MODER [1:0]. 
#define GPIO_MODER_BITS 2
#define GPIO_MODER_SHIFT 0
#define GPIO_MODER_MASK 0x3
#define GPIO_MODER_VAL_IN 0 // Input
#define GPIO_MODER_VAL_OUT 1 // General purpose output
#define GPIO_MODER_VAL_ALT 2 // Alternate function mode
#define GPIO_MODER_VAL_ANA 3 // Analog mode

// GPIO_OTYPER [0]. 
#define GPIO_OTYPER_BITS 1
#define GPIO_OTYPER_SHIFT 0
#define GPIO_OTYPER_MASK 0x1
#define GPIO_OTYPER_VAL_PP 0 // Push pull
#define GPIO_OTYPER_VAL_OD 1 // Open drain

// GPIO_OSPEEDR [1:0]. 
#define GPIO_OSPEEDR_BITS 2
#define GPIO_OSPEEDR_SHIFT 0
#define GPIO_OSPEEDR_MASK 0x3
#define GPIO_OSPEEDR_VAL_LOW 0 
#define GPIO_OSPEEDR_VAL_MED 1 
#define GPIO_OSPEEDR_VAL_HIGH 2 
#define GPIO_OSPEEDR_VAL_VHIGH 3 

// GPIO_PUPDR [1:0]. 
#define GPIO_PUPDR_BITS 2
#define GPIO_PUPDR_SHIFT 0
#define GPIO_PUPDR_MASK 0x3
#define GPIO_PUPDR_VAL_NONE 0 // No pull-up, pull-down
#define GPIO_PUPDR_VAL_PU 1 // Pull-up
#define GPIO_PUPDR_VAL_PD 2 // Pull-down

// GPIO_ODR [0]. Output data
#define GPIO_ODR_BITS 1
#define GPIO_ODR_SHIFT 0
#define GPIO_ODR_MASK 0x1

// GPIO_BSRRL_SET [0]. Bit set/reset (set)
#define GPIO_BSRRL_SET_BITS 1
#define GPIO_BSRRL_SET_SHIFT 0
#define GPIO_BSRRL_SET_MASK 0x1

// GPIO_BSRRH_CLR [0]. Bit set/reset (clear)
#define GPIO_BSRRH_CLR_BITS 1
#define GPIO_BSRRH_CLR_SHIFT 0
#define GPIO_BSRRH_CLR_MASK 0x1

// USART_BRR_MANTISSA [15:4]. 
#define USART_BRR_MANTISSA_BITS 12
#define USART_BRR_MANTISSA_SHIFT 4
#define USART_BRR_MANTISSA_MASK 0xfff

// USART_BRR_FRACTION [3:0]. 
#define USART_BRR_FRACTION_BITS 4
#define USART_BRR_FRACTION_SHIFT 0
#define USART_BRR_FRACTION_MASK 0xf

// USART_CR1_UE [13]. Enable
#define USART_CR1_UE_BITS 1
#define USART_CR1_UE_SHIFT 13
#define USART_CR1_UE_MASK 0x1
#define USART_CR1_UE_VAL_USART_ENABLE 1 

// USART_CR1_TE [3]. Tx Enalbe
#define USART_CR1_TE_BITS 1
#define USART_CR1_TE_SHIFT 3
#define USART_CR1_TE_MASK 0x1
#define USART_CR1_TE_VAL_TX_ENABLE 1 

// USART_CR1_RE [2]. Rx Enable
#define USART_CR1_RE_BITS 1
#define USART_CR1_RE_SHIFT 2
#define USART_CR1_RE_MASK 0x1
#define USART_CR1_RE_VAL_RX_ENABLE 1 

// USART_CR2_STOP [13:12]. STOP bits
#define USART_CR2_STOP_BITS 2
#define USART_CR2_STOP_SHIFT 12
#define USART_CR2_STOP_MASK 0x3
#define USART_CR2_STOP_VAL_1_STOP_BIT 0 

// PWR_CR_VOS [14]. 
#define PWR_CR_VOS_BITS 1
#define PWR_CR_VOS_SHIFT 14
#define PWR_CR_VOS_MASK 0x1
#define PWR_CR_VOS_VAL_SCALE1 1 

// FLASH_ACR_ICEN [9]. 
#define FLASH_ACR_ICEN_BITS 1
#define FLASH_ACR_ICEN_SHIFT 9
#define FLASH_ACR_ICEN_MASK 0x1
#define FLASH_ACR_ICEN_VAL_ENABLE 1 // Instruction cache enable

// FLASH_ACR_DCEN [10]. 
#define FLASH_ACR_DCEN_BITS 1
#define FLASH_ACR_DCEN_SHIFT 10
#define FLASH_ACR_DCEN_MASK 0x1
#define FLASH_ACR_DCEN_VAL_ENABLE 1 // Data cache enable

// FLASH_ACR_LATENCY [2:0]. 
#define FLASH_ACR_LATENCY_BITS 3
#define FLASH_ACR_LATENCY_SHIFT 0
#define FLASH_ACR_LATENCY_MASK 0x7
#define FLASH_ACR_LATENCY_VAL_5WS 5 // Five wait states

// DAC_CR_EN1 [0]. 
#define DAC_CR_EN1_BITS 1
#define DAC_CR_EN1_SHIFT 0
#define DAC_CR_EN1_MASK 0x1
#define DAC_CR_EN1_VAL_ENABLE 1 

// DAC_CR_DMAEN1 [12]. DAC channel1 DMA enable
#define DAC_CR_DMAEN1_BITS 1
#define DAC_CR_DMAEN1_SHIFT 12
#define DAC_CR_DMAEN1_MASK 0x1
#define DAC_CR_DMAEN1_VAL_ENABLE 1 

// DAC_CR_TSEL1 [5:3]. DAC channel1 trigger selection
#define DAC_CR_TSEL1_BITS 3
#define DAC_CR_TSEL1_SHIFT 3
#define DAC_CR_TSEL1_MASK 0x7
#define DAC_CR_TSEL1_VAL_SOFT_TRIG 7 
#define DAC_CR_TSEL1_VAL_TIMER6 0 // Timer 6 TRGO event used to trigger channel1

// DAC_CR_TEN1 [2]. DAC channel1 trigger enable
#define DAC_CR_TEN1_BITS 1
#define DAC_CR_TEN1_SHIFT 2
#define DAC_CR_TEN1_MASK 0x1
#define DAC_CR_TEN1_VAL_ENABLE 1 

// DAC_DHR12R1 [11:0]. Holding register for channel 1 of DAC (12-bit right aligned)
#define DAC_DHR12R1_BITS 12
#define DAC_DHR12R1_SHIFT 0
#define DAC_DHR12R1_MASK 0xfff

// DAC_SWTRIGR_SWTRIG1 [0]. 
#define DAC_SWTRIGR_SWTRIG1_BITS 1
#define DAC_SWTRIGR_SWTRIG1_SHIFT 0
#define DAC_SWTRIGR_SWTRIG1_MASK 0x1
#define DAC_SWTRIGR_SWTRIG1_VAL_ENABLE 1 

// DMA_SxCR_CHSEL [27:25]. DMA stream x configuration register: channel selection
#define DMA_SxCR_CHSEL_BITS 3
#define DMA_SxCR_CHSEL_SHIFT 25
#define DMA_SxCR_CHSEL_MASK 0x7

// DMA_SxCR_CIRC [8]. DMA stream x configuration register: circular mode
#define DMA_SxCR_CIRC_BITS 1
#define DMA_SxCR_CIRC_SHIFT 8
#define DMA_SxCR_CIRC_MASK 0x1
#define DMA_SxCR_CIRC_VAL_ENABLE 1 

// DMA_SxCR_EN [0]. Stream enable
#define DMA_SxCR_EN_BITS 1
#define DMA_SxCR_EN_SHIFT 0
#define DMA_SxCR_EN_MASK 0x1
#define DMA_SxCR_EN_VAL_ENABLE 1 

// DMA_SxCR_PINCOS [15]. Peripheral increment offset size
#define DMA_SxCR_PINCOS_BITS 1
#define DMA_SxCR_PINCOS_SHIFT 15
#define DMA_SxCR_PINCOS_MASK 0x1

// DMA_SxCR_MSIZE [14:13]. Memory data size
#define DMA_SxCR_MSIZE_BITS 2
#define DMA_SxCR_MSIZE_SHIFT 13
#define DMA_SxCR_MSIZE_MASK 0x3
#define DMA_SxCR_MSIZE_VAL_8BIT 0 
#define DMA_SxCR_MSIZE_VAL_16BIT 1 
#define DMA_SxCR_MSIZE_VAL_32BIT 2 

// DMA_SxCR_PSIZE [12:11]. Peripheral data size
#define DMA_SxCR_PSIZE_BITS 2
#define DMA_SxCR_PSIZE_SHIFT 11
#define DMA_SxCR_PSIZE_MASK 0x3
#define DMA_SxCR_PSIZE_VAL_8BIT 0 
#define DMA_SxCR_PSIZE_VAL_16BIT 1 
#define DMA_SxCR_PSIZE_VAL_32BIT 2 

// DMA_SxCR_MINC [10]. Memory increment mode
#define DMA_SxCR_MINC_BITS 1
#define DMA_SxCR_MINC_SHIFT 10
#define DMA_SxCR_MINC_MASK 0x1
#define DMA_SxCR_MINC_VAL_BY_MSIZE 1 // Memory address pointer is incremented after each data transfe

// DMA_SxCR_DIR [7:6]. Data transfer direction
#define DMA_SxCR_DIR_BITS 2
#define DMA_SxCR_DIR_SHIFT 6
#define DMA_SxCR_DIR_MASK 0x3
#define DMA_SxCR_DIR_VAL_MEM_TO_PERPH 1 

// DMA_SxCR_MBURST [24:23]. Memory burst transfer configuration (Number of transfers per arbitration)
#define DMA_SxCR_MBURST_BITS 2
#define DMA_SxCR_MBURST_SHIFT 23
#define DMA_SxCR_MBURST_MASK 0x3
#define DMA_SxCR_MBURST_VAL_SINGLE 0 
#define DMA_SxCR_MBURST_VAL_INCR4 1 // Incremental burst of 4
#define DMA_SxCR_MBURST_VAL_INCR8 2 // Incremental burst of 8
#define DMA_SxCR_MBURST_VAL_INCR16 3 // Incremental burst of 16

// DMA_SxCR_PBURST [22:21]. Peripheal burst transfer configuration (Number of transfers per arbitration)
#define DMA_SxCR_PBURST_BITS 2
#define DMA_SxCR_PBURST_SHIFT 21
#define DMA_SxCR_PBURST_MASK 0x3
#define DMA_SxCR_PBURST_VAL_SINGLE 0 
#define DMA_SxCR_PBURST_VAL_INCR4 1 // Incremental burst of 4
#define DMA_SxCR_PBURST_VAL_INCR8 2 // Incremental burst of 8
#define DMA_SxCR_PBURST_VAL_INCR16 3 // Incremental burst of 16

// DMA_SxCR_PL [17:16]. Priority level
#define DMA_SxCR_PL_BITS 2
#define DMA_SxCR_PL_SHIFT 16
#define DMA_SxCR_PL_MASK 0x3
#define DMA_SxCR_PL_VAL_LOW 0 
#define DMA_SxCR_PL_VAL_MEDIUM 1 
#define DMA_SxCR_PL_VAL_HIGH 2 
#define DMA_SxCR_PL_VAL_VERY_HIGH 3 

// DMA_SxCR_PFCTRL [5]. Peripheral flow controller
#define DMA_SxCR_PFCTRL_BITS 1
#define DMA_SxCR_PFCTRL_SHIFT 5
#define DMA_SxCR_PFCTRL_MASK 0x1
#define DMA_SxCR_PFCTRL_VAL_PERPH_IS_CTRL 1 

// DMA_SxCR_TCIE [4]. Transfer complete interrupt enable.
#define DMA_SxCR_TCIE_BITS 1
#define DMA_SxCR_TCIE_SHIFT 4
#define DMA_SxCR_TCIE_MASK 0x1
#define DMA_SxCR_TCIE_VAL_ENABLE 1 

// DMA_SxNDTR_NDT [15:0]. Number of data items to transfer (0-65535)
#define DMA_SxNDTR_NDT_BITS 16
#define DMA_SxNDTR_NDT_SHIFT 0
#define DMA_SxNDTR_NDT_MASK 0xffff

// TIM6_CR1_CEN [0]. Counter enable
#define TIM6_CR1_CEN_BITS 1
#define TIM6_CR1_CEN_SHIFT 0
#define TIM6_CR1_CEN_MASK 0x1
#define TIM6_CR1_CEN_VAL_ENABLE 1 

// TIM6_CR2_MMS [6:4]. Maset Mode Selection
#define TIM6_CR2_MMS_BITS 3
#define TIM6_CR2_MMS_SHIFT 4
#define TIM6_CR2_MMS_MASK 0x7
#define TIM6_CR2_MMS_VAL_RESET 0 
#define TIM6_CR2_MMS_VAL_ENABLE 1 
#define TIM6_CR2_MMS_VAL_UPDATE 2 

// TIM6_DIER_UDE [8]. Update DMA request
#define TIM6_DIER_UDE_BITS 1
#define TIM6_DIER_UDE_SHIFT 8
#define TIM6_DIER_UDE_MASK 0x1
#define TIM6_DIER_UDE_VAL_ENABLE 1 

// TIM6_DIER_UIE [0]. Update interrup enable
#define TIM6_DIER_UIE_BITS 1
#define TIM6_DIER_UIE_SHIFT 0
#define TIM6_DIER_UIE_MASK 0x1
#define TIM6_DIER_UIE_VAL_ENABLE 1 

// Values without register defined
